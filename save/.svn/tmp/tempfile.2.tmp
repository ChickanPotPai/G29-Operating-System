#include "syscalls.h"

#define ELF_SIZE 		40
#define ELF_MAGIC_0 	0x7f
#define ELF_MAGIC_1		0x45
#define ELF_MAGIC_2		0x4c
#define ELF_MAGIC_3		0x46
#define MAX_PROGS		8
#define DOESNT_EXIST	0
#define EXISTS			1
#define KERNEL_MEM_END	0x800000
#define STACK_SIZE		0x2000
#define PAGE_SIZE		0x400000
#define FD_SIZE			16
#define PCB_SIZE		LINE_BUFFER + (MAX_FD * FD_SIZE) + 12
#define IMAGE_ADDR		0x8048000
#define MEM_128MB		0x8000000
#define MEM_132MB		0x8400000
#define VIDMEM			0xB8000

#define V_ADDR_0		24
#define V_ADDR_1		25
#define V_ADDR_2		26
#define V_ADDR_3		27
#define ELF_0 			0
#define ELF_1 			1
#define ELF_2 			2
#define ELF_3 			3

#define OPEN_FUNCTION 0
#define CLOSE_FUNCTION 1
#define READ_FUNCTION 2
#define WRITE_FUNCTION 3

int32_t save_ebp[MAX_PROGS];
int32_t save_esp[MAX_PROGS];

void new_pcb_init(pcb_t* new_pcb);

static file_ops_t terminal_fops;
static file_ops_t rtc_fops;
static file_ops_t file_fops;

static pcb_t* curr_pcb;

static int pcb_track[MAX_PROGS] = {DOESNT_EXIST, DOESNT_EXIST, DOESNT_EXIST, DOESNT_EXIST, DOESNT_EXIST, DOESNT_EXIST, DOESNT_EXIST, DOESNT_EXIST};

int32_t system_execute(const char * cmd) {
	int i, j;
	int file_length;
	char name[LINE_BUFFER];
	uint8_t file_header[ELF_SIZE];
	uint32_t virtual_addr;
	uint32_t program_address;
	pcb_t* pcb_start;
	pcb_t* curr_parent_ptr;

	dentry_t dentry;
	inode_t* inode_ptr;
	inode_t* inodes;
	
	pcb_t new_pcb;

	new_pcb_init(&new_pcb);

	for (i = 0; i < LINE_BUFFER; i++) {
		if ((cmd[i] == ' ') || (cmd[i] == '\0')) {
			name[i] = '\0';
			break;
		}

		name[i] = cmd[i];
	}

	while (cmd[i] == ' ') {
		i++;
	}

	for (j = i; j < (LINE_BUFFER - i); j++) {
		if (cmd[j] == '\0') {
			break;
		} else {
			new_pcb.args[j - i] = cmd[j];
		}
	}

	if (read_dentry_by_name ((uint8_t*) name, &dentry) == -1) {return -1;}

	inodes = (inode_t*) (boot);
	inode_ptr = &(inodes[dentry.inode + 1]);

	file_length = inode_ptr->length;

	read_data(dentry.inode, 0, file_header, ELF_SIZE);

	if (file_header[ELF_0] != ELF_MAGIC_0 || 
		file_header[ELF_1] != ELF_MAGIC_1 ||
		file_header[ELF_2] != ELF_MAGIC_2 ||
		file_header[ELF_3] != ELF_MAGIC_3) {return -1;}
	
	virtual_addr = file_header[V_ADDR_0] + 
					(file_header[V_ADDR_1] << 8) +
					(file_header[V_ADDR_2] << 16) +
					(file_header[V_ADDR_3] << 24);

	for (i = 0; i < MAX_PROGS; i++) {
		if (pcb_track[i] == DOESNT_EXIST) {

			pcb_start = (pcb_t*) (KERNEL_MEM_END - STACK_SIZE  - (i * STACK_SIZE));

			memcpy((void*) pcb_start, &new_pcb, PCB_SIZE);

			pcb_track[i] = EXISTS;
			pcb_start->physical_addr = KERNEL_MEM_END + (i * PAGE_SIZE);
			pcb_start->pid = i;

			swap_tables(i);
			program_address = KERNEL_MEM_END + i*PAGE_SIZE;
			add_page(program_address, i);

			break;
		}
		if (i == 7 && pcb_track[i] == EXISTS)
		{
			printf("max processes reached\n");
			return 0;
		}
	}
	pcb_start->parent_ptr = (uint32_t) curr_pcb;
	curr_pcb = pcb_start;


	asm volatile("movl %%esp, %0"
		:"=a"(save_esp[curr_pcb->pid])
		:
		:"cc"
	);

	asm volatile("movl %%ebp, %0"
		:"=a"(save_ebp[curr_pcb->pid])
		:
		:"cc"
	);

	(&tss)->esp0 = (uint32_t)pcb_start + STACK_SIZE - 4;
	read_data(dentry.inode, 0, (uint8_t*) IMAGE_ADDR, file_length);

	asm volatile(" 			\n\
		movw	%0, %%ax 	\n\
		movw	%%ax, %%ds 	\n\
		pushl	%0 			\n\
		pushl	%1 			\n\
		pushf 				\n\
		pushl 	%2 			\n\
		pushl 	%3 			\n\
		iret				\n\
		return_syscall:		\n\
		"
		:
		: "g" (USER_DS),  "g" (MEM_132MB - 4), "g" (USER_CS), "g" (virtual_addr)
		: "eax", "memory"
	);

	curr_parent_ptr = (pcb_t*) curr_pcb->parent_ptr;

	if (curr_parent_ptr == NULL)
	{
		relaunch_shell();
		return 0;
	}

	(&tss)->esp0 = (uint32_t)curr_parent_ptr + STACK_SIZE - 4;
	swap_tables(curr_parent_ptr->pid);

	pcb_track[curr_pcb->pid] = DOESNT_EXIST;
	curr_pcb = curr_parent_ptr;

	return 0;
}

void relaunch_shell()
{
	pcb_track[curr_pcb->pid] = DOESNT_EXIST;
	curr_pcb = NULL;
	printf("relaunching\n");
	system_execute("shell");
}

int32_t system_halt(uint8_t status) {
	asm volatile("			\n\
			movl %0, %%ebp 	\n\
			"
			:
			: "r" (save_ebp[curr_pcb->pid])
			: "memory");

	asm volatile("			\n\
			movl %0, %%esp 	\n\
			"
			:
			: "r" (save_esp[curr_pcb->pid])
			: "memory");

	asm volatile("jmp return_syscall");

	return 0;
}


int32_t system_read(int32_t fd, void* buf, int32_t nbytes) {
	if (fd == 1) {return -1;}
	if ((fd < 0) || (fd > (MAX_FD - 1))) {return -1;}
	if (curr_pcb->file_array[fd].flags == 0) {return -1;}

	return curr_pcb->file_array[fd].fops_ptr->read_ptr(fd, buf, nbytes);
}


int32_t system_write(int32_t fd, const void* buf, int32_t nbytes) {
	if ((fd < 1) || (fd > (MAX_FD - 1))) {return -1;}
	if (curr_pcb->file_array[fd].flags == 0) {return -1;}

	return curr_pcb->file_array[fd].fops_ptr->write_ptr(fd, buf, nbytes);
}

int32_t system_open(const uint8_t* filename) {
	dentry_t curr_dentry;

	if(strncmp((int8_t*) filename, "", NAME_SIZE) == 0) {return -1;}
	if (read_dentry_by_name(filename, &curr_dentry) == -1) {return -1;}

	switch(curr_dentry.type) {
		case 0:
			return rtc_fops.open_ptr(filename, curr_pcb);
		case 1:
		case 2:
			return file_fops.open_ptr(filename, curr_pcb);
	}

	return 0;
}


int32_t system_close(int32_t fd) {
	if ((fd < FD_BEGIN) || (fd > (MAX_FD - 1))) {return -1;}
	if (curr_pcb->file_array[fd].flags == 0) {return -1;}

	if ((uint32_t*) (curr_pcb->file_array[fd].fops_ptr->close_ptr) == (uint32_t*) &rtc_close) {
		return rtc_fops.close_ptr(fd, curr_pcb);
	} else {
		return file_fops.close_ptr(fd, curr_pcb);
	}	
}

int32_t system_getargs(uint8_t *buf, int32_t nbytes) {
	if (!buf)
		return -1;

	memset(buf, 0, nbytes);
	memcpy(buf, curr_pcb->args, nbytes);
	buf[nbytes] = '\0';

	return 0;
}

int32_t system_vidmap(uint8_t** screen_start) {
	if (screen_start == NULL) {return -1;}
	if ((int32_t) screen_start < MEM_128MB || (int32_t) screen_start > MEM_132MB) {return -1;}

	*screen_start = (uint8_t*) VIDMEM;
	return 0;
}

int32_t system_set_handler(int32_t signum, void* handler_address)
{
	return -1;
}

int32_t system_sigreturn()
{
	return -1;
}

void fops_init() {
	terminal_fops.open_ptr = (open_func_ptr)terminal_open;
	terminal_fops.close_ptr = (close_func_ptr)terminal_close;
	terminal_fops.read_ptr = (read_func_ptr) terminal_read;
	terminal_fops.write_ptr = (write_func_ptr) terminal_write;

	rtc_fops.open_ptr = (open_func_ptr)rtc_open;
	rtc_fops.close_ptr = (close_func_ptr)rtc_close;
	rtc_fops.read_ptr = (read_func_ptr)rtc_read;
	rtc_fops.write_ptr = (write_func_ptr)rtc_write;

	file_fops.open_ptr = (open_func_ptr)fs_open;
	file_fops.close_ptr = (close_func_ptr)fs_close;  
	file_fops.read_ptr = (read_func_ptr)fs_read;
	file_fops.write_ptr = (write_func_ptr)fs_write;
}

void new_pcb_init(pcb_t* new_pcb) {
	int i;

	new_pcb->file_array[0].fops_ptr = (file_ops_t*) &terminal_fops;
	new_pcb->file_array[0].inode_ptr = DOESNT_EXIST;
	new_pcb->file_array[0].file_position = DOESNT_EXIST;
	new_pcb->file_array[0].flags = EXISTS;

	new_pcb->file_array[1].fops_ptr = (file_ops_t*) &terminal_fops;
	new_pcb->file_array[1].inode_ptr = DOESNT_EXIST;
	new_pcb->file_array[1].file_position = DOESNT_EXIST;
	new_pcb->file_array[1].flags = EXISTS;
	
	for(i = 2; i < MAX_FD; i++) {
		new_pcb->file_array[i].fops_ptr = DOESNT_EXIST;
		new_pcb->file_array[i].inode_ptr = DOESNT_EXIST;
		new_pcb->file_array[i].file_position = DOESNT_EXIST;
		new_pcb->file_array[i].flags = DOESNT_EXIST;
	}

	new_pcb->parent_ptr = DOESNT_EXIST;

}

pcb_t* get_curr_pcb() {return curr_pcb;}
file_ops_t* get_terminal_fops() {return &terminal_fops;}
file_ops_t* get_rtc_fops() {return &rtc_fops;}
file_ops_t* get_file_fops() {return &file_fops;}
